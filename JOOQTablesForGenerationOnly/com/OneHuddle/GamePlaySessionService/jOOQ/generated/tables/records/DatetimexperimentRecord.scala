/*
 * This file is generated by jOOQ.
*/
package com.OneHuddle.GamePlaySessionService.jOOQ.generated.tables.records


import com.OneHuddle.GamePlaySessionService.jOOQ.generated.tables.Datetimexperiment

import java.lang.Short
import java.sql.Timestamp

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record2
import org.jooq.Row2
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.10.0"
  ),
  comments = "This class is generated by jOOQ"
)
class DatetimexperimentRecord extends UpdatableRecordImpl[DatetimexperimentRecord](Datetimexperiment.DATETIMEXPERIMENT) with Record2[Short, Timestamp] {

  /**
   * Setter for <code>OneHuddle.DateTimExperiment.justID</code>.
   */
  def setJustid(value : Short) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>OneHuddle.DateTimExperiment.justID</code>.
   */
  def getJustid : Short = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Short]
  }

  /**
   * Setter for <code>OneHuddle.DateTimExperiment.lastPlayedOn</code>.
   */
  def setLastplayedon(value : Timestamp) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>OneHuddle.DateTimExperiment.lastPlayedOn</code>.
   */
  def getLastplayedon : Timestamp = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[Timestamp]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key : Record1[Short] = {
    return super.key.asInstanceOf[ Record1[Short] ]
  }

  // -------------------------------------------------------------------------
  // Record2 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row2[Short, Timestamp] = {
    super.fieldsRow.asInstanceOf[ Row2[Short, Timestamp] ]
  }

  override def valuesRow : Row2[Short, Timestamp] = {
    super.valuesRow.asInstanceOf[ Row2[Short, Timestamp] ]
  }
  override def field1 : Field[Short] = Datetimexperiment.DATETIMEXPERIMENT.JUSTID
  override def field2 : Field[Timestamp] = Datetimexperiment.DATETIMEXPERIMENT.LASTPLAYEDON
  override def component1 : Short = getJustid
  override def component2 : Timestamp = getLastplayedon
  override def value1 : Short = getJustid
  override def value2 : Timestamp = getLastplayedon

  override def value1(value : Short) : DatetimexperimentRecord = {
    setJustid(value)
    this
  }

  override def value2(value : Timestamp) : DatetimexperimentRecord = {
    setLastplayedon(value)
    this
  }

  override def values(value1 : Short, value2 : Timestamp) : DatetimexperimentRecord = {
    this.value1(value1)
    this.value2(value2)
    this
  }

  /**
   * Create a detached, initialised DatetimexperimentRecord
   */
  def this(justid : Short, lastplayedon : Timestamp) = {
    this()

    set(0, justid)
    set(1, lastplayedon)
  }
}
