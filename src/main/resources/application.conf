kamon {

  # What should be recorder
  metric {
    tick-interval = 1 ms
    disable-aspecj-weaver-missing-error = false
    filters = {
      akka-actor {
        # includes = [ "*/user/**", "*/GameSessionRecording/user/GameSessionSPOC/**" ]
        # excludes = [ "*/system/**" ]
        includes = [ "/GameSessionRecording/user/GameSessionSPOC/**" ]
        excludes = [ "*/system/**" ]
      }

      akka-dispatcher {
        includes = [ "my-app/akka.actor.default-dispatcher", "my-app/database-dispatcher" ]
        excludes = []
      }

      akka-router {
        includes = [ "my-app/user/some-router" ]
        excludes = []
      }
    }
  }

  show-aspectj-missing-warning = yes
  # ~~~~~~ StatsD configuration ~~~~~~~~~~~~~~~~~~~~~~~~

  statsd {
    # Hostname and port in which your StatsD is running. Remember that StatsD packets are sent using UDP and
    # setting unreachable hosts and/or not open ports wont be warned by the Kamon, your data wont go anywhere.
    hostname = "127.0.0.1"
    port = 8125

    time-units = "ms"

    # Interval between metrics data flushes to StatsD. It's value must be equal or greater than the
    # kamon.metric.tick-interval setting.
    flush-interval = 2

    # Max packet size for UDP metrics data sent to StatsD.
    max-packet-size = 1024 bytes

    # Subscription patterns used to select which metrics will be pushed to StatsD. Note that first, metrics
    # collection for your desired entities must be activated under the kamon.metrics.filters settings.
    includes {
      actor       = [ "*" ]
      trace       = [ "*" ]
      dispatcher  = [ "*" ]
    }

    simple-metric-key-generator {
      # Application prefix for all metrics pushed to StatsD. The default namespacing scheme for metrics follows
      # this pattern:
      #    application.host.entity.entity-name.metric-name
      # application = "GameSessionRecording"
    }
  }
}

akka {
  // TODO: Is this is the best executor employable?
  // Why not fork-join-executor?
  // We need to investigate.
  blocking-rdbms-io-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 2
    }
    throughput = 1
  }
}


GameSession {

  redisEndPoint {

    host = "127.0.0.1"
    port = 6379
  }

  availableAt {

    host = "0.0.0.0"
    port = 9090
  }

  maxGameSessionLifetime {
    // All GameSessions will automatically terminate once this time elapses.
    // Unit is expressed in seconds
    duration = 60
  }

  maxResponseTimeLimit {
    // Every request to GameSessionRecordingService is handled internally, by passing messages and
    // delegating responsibilities to actors. Each of these actors represents a GameSession. A request
    // delegated to such an actor, should not take more than the duration specified here.
    // This is an internally used value: should be increased only after due analysis.
    // Unit is expressed in seconds
    duration = 3
  }

  externalServices {

    // HTTP endpoints, which want to be informed when a GameSession is finished
    completionSubscribers = ["http://httpbin.org/put"]
    LeaderboardHostingService = "http://httpbin.org/put]"
    dbAccessURL = "jdbc:mariadb://localhost:3306/OneHuddle?user=nuovo&password=nuovo123"
  }

}

akka {
  # event-handlers = ["akka.event.slf4j.Slf4jEventHandler"]
  // loggers = ["akka.event.slf4j.Slf4jLogger"]
  // loggers = ["akka.event.Logging$DefaultLogger"]
  loglevel = "DEBUG"
}
