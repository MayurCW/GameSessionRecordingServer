/*
 * This file is generated by jOOQ.
*/
package com.OneHuddle.GamePlaySessionService.jOOQ.generated.tables


import com.OneHuddle.GamePlaySessionService.jOOQ.generated.Indexes
import com.OneHuddle.GamePlaySessionService.jOOQ.generated.Keys
import com.OneHuddle.GamePlaySessionService.jOOQ.generated.Onehuddle
import com.OneHuddle.GamePlaySessionService.jOOQ.generated.tables.records.PlayerperformanceRecord

import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.sql.Timestamp
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl

import scala.Array


object Playerperformance {

  /**
   * The reference instance of <code>OneHuddle.PlayerPerformance</code>
   */
  val PLAYERPERFORMANCE = new Playerperformance
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.10.0"
  ),
  comments = "This class is generated by jOOQ"
)
class Playerperformance(alias : Name, aliased : Table[PlayerperformanceRecord], parameters : Array[ Field[_] ]) extends TableImpl[PlayerperformanceRecord](alias, Onehuddle.ONEHUDDLE, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[PlayerperformanceRecord] = {
    classOf[PlayerperformanceRecord]
  }

  /**
   * The column <code>OneHuddle.PlayerPerformance.recordID</code>.
   */
  val RECORDID : TableField[PlayerperformanceRecord, Integer] = createField("recordID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), "")

  /**
   * The column <code>OneHuddle.PlayerPerformance.companyID</code>.
   */
  val COMPANYID : TableField[PlayerperformanceRecord, String] = createField("companyID", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.field("NOTSET", org.jooq.impl.SQLDataType.VARCHAR)), "")

  /**
   * The column <code>OneHuddle.PlayerPerformance.belongsToDepartment</code>.
   */
  val BELONGSTODEPARTMENT : TableField[PlayerperformanceRecord, String] = createField("belongsToDepartment", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.field("NOTSET", org.jooq.impl.SQLDataType.VARCHAR)), "")

  /**
   * The column <code>OneHuddle.PlayerPerformance.playerID</code>.
   */
  val PLAYERID : TableField[PlayerperformanceRecord, String] = createField("playerID", org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false).defaultValue(org.jooq.impl.DSL.field("NOTSET", org.jooq.impl.SQLDataType.VARCHAR)), "")

  /**
   * The column <code>OneHuddle.PlayerPerformance.gameID</code>.
   */
  val GAMEID : TableField[PlayerperformanceRecord, String] = createField("gameID", org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false).defaultValue(org.jooq.impl.DSL.field("NOTSET", org.jooq.impl.SQLDataType.VARCHAR)), "")

  /**
   * The column <code>OneHuddle.PlayerPerformance.gameType</code>.
   */
  val GAMETYPE : TableField[PlayerperformanceRecord, String] = createField("gameType", org.jooq.impl.SQLDataType.VARCHAR(8).nullable(false).defaultValue(org.jooq.impl.DSL.field("NOTSET", org.jooq.impl.SQLDataType.VARCHAR)), "")

  /**
   * The column <code>OneHuddle.PlayerPerformance.groupID</code>.
   */
  val GROUPID : TableField[PlayerperformanceRecord, String] = createField("groupID", org.jooq.impl.SQLDataType.VARCHAR(32).nullable(false).defaultValue(org.jooq.impl.DSL.field("NOTSET", org.jooq.impl.SQLDataType.VARCHAR)), "")

  /**
   * The column <code>OneHuddle.PlayerPerformance.lastPlayedOn</code>.
   */
  val LASTPLAYEDON : TableField[PlayerperformanceRecord, Timestamp] = createField("lastPlayedOn", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), "")

  /**
   * The column <code>OneHuddle.PlayerPerformance.timezoneApplicable</code>.
   */
  val TIMEZONEAPPLICABLE : TableField[PlayerperformanceRecord, String] = createField("timezoneApplicable", org.jooq.impl.SQLDataType.VARCHAR(16).nullable(false).defaultValue(org.jooq.impl.DSL.field("NOTSET", org.jooq.impl.SQLDataType.VARCHAR)), "")

  /**
   * The column <code>OneHuddle.PlayerPerformance.pointsObtained</code>.
   */
  val POINTSOBTAINED : TableField[PlayerperformanceRecord, Integer] = createField("pointsObtained", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>OneHuddle.PlayerPerformance.timeTaken</code>.
   */
  val TIMETAKEN : TableField[PlayerperformanceRecord, Integer] = createField("timeTaken", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>OneHuddle.PlayerPerformance.winsAchieved</code>.
   */
  val WINSACHIEVED : TableField[PlayerperformanceRecord, Integer] = createField("winsAchieved", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * Create a <code>OneHuddle.PlayerPerformance</code> table reference
   */
  def this() = {
    this(DSL.name("PlayerPerformance"), null, null)
  }

  /**
   * Create an aliased <code>OneHuddle.PlayerPerformance</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), com.OneHuddle.GamePlaySessionService.jOOQ.generated.tables.Playerperformance.PLAYERPERFORMANCE, null)
  }

  /**
   * Create an aliased <code>OneHuddle.PlayerPerformance</code> table reference
   */
  def this(alias : Name) = {
    this(alias, com.OneHuddle.GamePlaySessionService.jOOQ.generated.tables.Playerperformance.PLAYERPERFORMANCE, null)
  }

  private def this(alias : Name, aliased : Table[PlayerperformanceRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Onehuddle.ONEHUDDLE

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.PLAYERPERFORMANCE_PRIMARY)
  }

  override def getIdentity : Identity[PlayerperformanceRecord, Integer] = {
    Keys.IDENTITY_PLAYERPERFORMANCE
  }

  override def getPrimaryKey : UniqueKey[PlayerperformanceRecord] = {
    Keys.KEY_PLAYERPERFORMANCE_PRIMARY
  }

  override def getKeys : List[ UniqueKey[PlayerperformanceRecord] ] = {
    return Arrays.asList[ UniqueKey[PlayerperformanceRecord] ](Keys.KEY_PLAYERPERFORMANCE_PRIMARY)
  }

  override def as(alias : String) : Playerperformance = {
    new Playerperformance(DSL.name(alias), this)
  }

  override def as(alias : Name) : Playerperformance = {
    new Playerperformance(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : Playerperformance = {
    new Playerperformance(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : Playerperformance = {
    new Playerperformance(name, null)
  }
}
