/*
 * This file is generated by jOOQ.
*/
package com.OneHuddle.GamePlaySessionService.jOOQ.generated.tables.records


import com.OneHuddle.GamePlaySessionService.jOOQ.generated.tables.Playerperformance

import java.lang.Integer
import java.lang.String
import java.sql.Timestamp

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Record12
import org.jooq.Record9
import org.jooq.Row12
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.10.0"
  ),
  comments = "This class is generated by jOOQ"
)
class PlayerperformanceRecord extends UpdatableRecordImpl[PlayerperformanceRecord](Playerperformance.PLAYERPERFORMANCE) with Record12[Integer, String, String, String, String, String, String, Timestamp, String, Integer, Integer, Integer] {

  /**
   * Setter for <code>OneHuddle.PlayerPerformance.recordID</code>.
   */
  def setRecordid(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>OneHuddle.PlayerPerformance.recordID</code>.
   */
  def getRecordid : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>OneHuddle.PlayerPerformance.companyID</code>.
   */
  def setCompanyid(value : String) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>OneHuddle.PlayerPerformance.companyID</code>.
   */
  def getCompanyid : String = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>OneHuddle.PlayerPerformance.belongsToDepartment</code>.
   */
  def setBelongstodepartment(value : String) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>OneHuddle.PlayerPerformance.belongsToDepartment</code>.
   */
  def getBelongstodepartment : String = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>OneHuddle.PlayerPerformance.playerID</code>.
   */
  def setPlayerid(value : String) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>OneHuddle.PlayerPerformance.playerID</code>.
   */
  def getPlayerid : String = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>OneHuddle.PlayerPerformance.gameID</code>.
   */
  def setGameid(value : String) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>OneHuddle.PlayerPerformance.gameID</code>.
   */
  def getGameid : String = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>OneHuddle.PlayerPerformance.gameType</code>.
   */
  def setGametype(value : String) : Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>OneHuddle.PlayerPerformance.gameType</code>.
   */
  def getGametype : String = {
    val r = get(5)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>OneHuddle.PlayerPerformance.groupID</code>.
   */
  def setGroupid(value : String) : Unit = {
    set(6, value)
  }

  /**
   * Getter for <code>OneHuddle.PlayerPerformance.groupID</code>.
   */
  def getGroupid : String = {
    val r = get(6)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>OneHuddle.PlayerPerformance.lastPlayedOn</code>.
   */
  def setLastplayedon(value : Timestamp) : Unit = {
    set(7, value)
  }

  /**
   * Getter for <code>OneHuddle.PlayerPerformance.lastPlayedOn</code>.
   */
  def getLastplayedon : Timestamp = {
    val r = get(7)
    if (r == null) null else r.asInstanceOf[Timestamp]
  }

  /**
   * Setter for <code>OneHuddle.PlayerPerformance.timezoneApplicable</code>.
   */
  def setTimezoneapplicable(value : String) : Unit = {
    set(8, value)
  }

  /**
   * Getter for <code>OneHuddle.PlayerPerformance.timezoneApplicable</code>.
   */
  def getTimezoneapplicable : String = {
    val r = get(8)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>OneHuddle.PlayerPerformance.pointsObtained</code>.
   */
  def setPointsobtained(value : Integer) : Unit = {
    set(9, value)
  }

  /**
   * Getter for <code>OneHuddle.PlayerPerformance.pointsObtained</code>.
   */
  def getPointsobtained : Integer = {
    val r = get(9)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>OneHuddle.PlayerPerformance.timeTaken</code>.
   */
  def setTimetaken(value : Integer) : Unit = {
    set(10, value)
  }

  /**
   * Getter for <code>OneHuddle.PlayerPerformance.timeTaken</code>.
   */
  def getTimetaken : Integer = {
    val r = get(10)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>OneHuddle.PlayerPerformance.winsAchieved</code>.
   */
  def setWinsachieved(value : Integer) : Unit = {
    set(11, value)
  }

  /**
   * Getter for <code>OneHuddle.PlayerPerformance.winsAchieved</code>.
   */
  def getWinsachieved : Integer = {
    val r = get(11)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key : Record9[Integer, String, String, String, String, String, String, Timestamp, String] = {
    return super.key.asInstanceOf[ Record9[Integer, String, String, String, String, String, String, Timestamp, String] ]
  }

  // -------------------------------------------------------------------------
  // Record12 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row12[Integer, String, String, String, String, String, String, Timestamp, String, Integer, Integer, Integer] = {
    super.fieldsRow.asInstanceOf[ Row12[Integer, String, String, String, String, String, String, Timestamp, String, Integer, Integer, Integer] ]
  }

  override def valuesRow : Row12[Integer, String, String, String, String, String, String, Timestamp, String, Integer, Integer, Integer] = {
    super.valuesRow.asInstanceOf[ Row12[Integer, String, String, String, String, String, String, Timestamp, String, Integer, Integer, Integer] ]
  }
  override def field1 : Field[Integer] = Playerperformance.PLAYERPERFORMANCE.RECORDID
  override def field2 : Field[String] = Playerperformance.PLAYERPERFORMANCE.COMPANYID
  override def field3 : Field[String] = Playerperformance.PLAYERPERFORMANCE.BELONGSTODEPARTMENT
  override def field4 : Field[String] = Playerperformance.PLAYERPERFORMANCE.PLAYERID
  override def field5 : Field[String] = Playerperformance.PLAYERPERFORMANCE.GAMEID
  override def field6 : Field[String] = Playerperformance.PLAYERPERFORMANCE.GAMETYPE
  override def field7 : Field[String] = Playerperformance.PLAYERPERFORMANCE.GROUPID
  override def field8 : Field[Timestamp] = Playerperformance.PLAYERPERFORMANCE.LASTPLAYEDON
  override def field9 : Field[String] = Playerperformance.PLAYERPERFORMANCE.TIMEZONEAPPLICABLE
  override def field10 : Field[Integer] = Playerperformance.PLAYERPERFORMANCE.POINTSOBTAINED
  override def field11 : Field[Integer] = Playerperformance.PLAYERPERFORMANCE.TIMETAKEN
  override def field12 : Field[Integer] = Playerperformance.PLAYERPERFORMANCE.WINSACHIEVED
  override def component1 : Integer = getRecordid
  override def component2 : String = getCompanyid
  override def component3 : String = getBelongstodepartment
  override def component4 : String = getPlayerid
  override def component5 : String = getGameid
  override def component6 : String = getGametype
  override def component7 : String = getGroupid
  override def component8 : Timestamp = getLastplayedon
  override def component9 : String = getTimezoneapplicable
  override def component10 : Integer = getPointsobtained
  override def component11 : Integer = getTimetaken
  override def component12 : Integer = getWinsachieved
  override def value1 : Integer = getRecordid
  override def value2 : String = getCompanyid
  override def value3 : String = getBelongstodepartment
  override def value4 : String = getPlayerid
  override def value5 : String = getGameid
  override def value6 : String = getGametype
  override def value7 : String = getGroupid
  override def value8 : Timestamp = getLastplayedon
  override def value9 : String = getTimezoneapplicable
  override def value10 : Integer = getPointsobtained
  override def value11 : Integer = getTimetaken
  override def value12 : Integer = getWinsachieved

  override def value1(value : Integer) : PlayerperformanceRecord = {
    setRecordid(value)
    this
  }

  override def value2(value : String) : PlayerperformanceRecord = {
    setCompanyid(value)
    this
  }

  override def value3(value : String) : PlayerperformanceRecord = {
    setBelongstodepartment(value)
    this
  }

  override def value4(value : String) : PlayerperformanceRecord = {
    setPlayerid(value)
    this
  }

  override def value5(value : String) : PlayerperformanceRecord = {
    setGameid(value)
    this
  }

  override def value6(value : String) : PlayerperformanceRecord = {
    setGametype(value)
    this
  }

  override def value7(value : String) : PlayerperformanceRecord = {
    setGroupid(value)
    this
  }

  override def value8(value : Timestamp) : PlayerperformanceRecord = {
    setLastplayedon(value)
    this
  }

  override def value9(value : String) : PlayerperformanceRecord = {
    setTimezoneapplicable(value)
    this
  }

  override def value10(value : Integer) : PlayerperformanceRecord = {
    setPointsobtained(value)
    this
  }

  override def value11(value : Integer) : PlayerperformanceRecord = {
    setTimetaken(value)
    this
  }

  override def value12(value : Integer) : PlayerperformanceRecord = {
    setWinsachieved(value)
    this
  }

  override def values(value1 : Integer, value2 : String, value3 : String, value4 : String, value5 : String, value6 : String, value7 : String, value8 : Timestamp, value9 : String, value10 : Integer, value11 : Integer, value12 : Integer) : PlayerperformanceRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this.value6(value6)
    this.value7(value7)
    this.value8(value8)
    this.value9(value9)
    this.value10(value10)
    this.value11(value11)
    this.value12(value12)
    this
  }

  /**
   * Create a detached, initialised PlayerperformanceRecord
   */
  def this(recordid : Integer, companyid : String, belongstodepartment : String, playerid : String, gameid : String, gametype : String, groupid : String, lastplayedon : Timestamp, timezoneapplicable : String, pointsobtained : Integer, timetaken : Integer, winsachieved : Integer) = {
    this()

    set(0, recordid)
    set(1, companyid)
    set(2, belongstodepartment)
    set(3, playerid)
    set(4, gameid)
    set(5, gametype)
    set(6, groupid)
    set(7, lastplayedon)
    set(8, timezoneapplicable)
    set(9, pointsobtained)
    set(10, timetaken)
    set(11, winsachieved)
  }
}
